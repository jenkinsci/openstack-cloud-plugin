<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core">
  <div>
    <p>
    Before the userdata is sent to the OpenStack instance, the following values are injected and can be referenced within the userdata using $${VARIABLE_NAME} syntax:
    <dl>
      <!-- Descriptor not exposed for help files? -->
      <j:forEach var="entry" items="${app.getDescriptor('jenkins.plugins.openstack.compute.UserDataConfig').variables}">
        <dt><code>${entry.name}</code></dt>
        <dd><j:out value="${entry.description}"/></dd>
      </j:forEach>
    </dl>
    </p>
    <p>
    For example, a unix-based JNLP slave could use a script such as
    <blockquote>
      <code>
      #!/bin/sh<br/>
      mkdir -p &quot;$${SLAVE_JENKINS_HOME}&quot;<br/>
      wget &quot;$${SLAVE_JAR_URL}&quot; -O &quot;$${SLAVE_JENKINS_HOME}/slave.jar&quot;<br/>
      cd &quot;$${SLAVE_JENKINS_HOME}&quot;<br/>
      java $${SLAVE_JVM_OPTIONS} -jar &quot;$${SLAVE_JENKINS_HOME}/slave.jar&quot; -jnlpUrl &quot;$${SLAVE_JNLP_URL}&quot; -secret &quot;$${SLAVE_JNLP_SECRET}&quot;
      </code>
    </blockquote>
    whereas a Windows-based JNLP slave could use a script such as
    <blockquote>
      <code>
        #ps1<br/>
        mkdir -Force &quot;$${SLAVE_JENKINS_HOME}&quot;<br/>
        (new-object System.Net.WebClient).DownloadFile(&apos;$${SLAVE_JAR_URL}&apos;,&apos;$${SLAVE_JENKINS_HOME}\slave.jar&apos;)<br/>
        cd &quot;$${SLAVE_JENKINS_HOME}&quot;<br/>
        java $${SLAVE_JVM_OPTIONS} -jar &quot;slave.jar&quot; -jnlpUrl &quot;$${SLAVE_JNLP_URL}&quot; -secret &quot;$${SLAVE_JNLP_SECRET}&quot;
      </code>
    </blockquote>
    </p>
  </div>
</j:jelly>
